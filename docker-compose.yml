version: '3.9'

networks:
  ft_transcendence:

#------------------------------------#
#              Volumes               #
#------------------------------------#
volumes:

  nestjs_api:
    name: nestjs_api
    driver: local
    driver_opts:
      device: ./src/backend/nestjs/api
      o: bind
      type: none
  
  postgresql_data:
    name: postgresql_data
    driver: local
    driver_opts:
      device: /home/jopadova/postgresql/data
      o: bind
      type: none

  pgadmin_data:

#------------------------------------#
#              Services              #
#------------------------------------#
services:

  nestjs:
    container_name: nestjs
    build:
      context: ./src/backend/nestjs
      dockerfile: Dockerfile
    image: nestjs
    expose:
      - 3000
    volumes:
      - nestjs_api:/api
    networks:
      - ft_transcendence
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      
      - INTRA_CLIENT_ID=${INTRA_CLIENT_ID}
      - INTRA_CLIENT_SECRET=${INTRA_CLIENT_SECRET}
      - INTRA_CLIENT_STAT=${INTRA_CLIENT_STAT}

      - LOCAL_ADDRESS=${LOCAL_ADDRESS}
      - LOCAL_ENDPOINT=http://${LOCAL_ADDRESS}:${LOCAL_PORT}
      - LOCAL_CALLBACK=http://${LOCAL_ADDRESS}:${LOCAL_PORT}/${LOCAL_CALLBACK_ENDPOINT}
    
      - OTP_NAME=${OTP_NAME}
      - JWT_ACCESS_TOKEN=${JWT_ACCESS_TOKEN}

      - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "localhost:3000/api/health"]
      interval: 3s
      timeout: 10s
      retries: 10
      start_period: 4s

  postgresql:
    image: postgres
    container_name: postgresql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - ft_transcendence
    expose:
      - 5432
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 1s
      timeout: 10s
      retries: 10
      start_period: 1s

  vuejs:
    container_name: vuejs
    build:
      context: ./src/frontend/vuejs
      dockerfile: ./Dockerfile
    image: vuejs
    ports:
      - 10.0.2.15:3000:80
    networks:
      - ft_transcendence
    environment:
      - SERVER_HOSTNAME=${LOCAL_ADDRESS}
    depends_on:
      nestjs:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 5050:80
    networks:
      - ft_transcendence
    volumes:
      - pgadmin_data:/pgadmin4