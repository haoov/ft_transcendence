version: '3.9'

networks:
  ft_transcendence:

#------------------------------------#
#              Volumes               #
#------------------------------------#
volumes:

  nestjs_api:
    name: nestjs_api
    driver: local
    driver_opts:
      device: ./backend/nestjs/api
      o: bind
      type: none
  
  postgresql_data:
  #!comment this when using at 42
    # name: postgresql_data
    # driver: local
    # driver_opts:
    #   device: ./backend/postgresql/data
    #   o: bind
    #   type: none
  #!comment end

#------------------------------------#
#              Services              #
#------------------------------------#
services:

  nestjs:
    container_name: nestjs
    build:
      context: ./backend/nestjs
      dockerfile: Dockerfile
    image: nestjs
    expose:
      - 3000
    volumes:
      - nestjs_api:/api
    networks:
      - ft_transcendence
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      
      - INTRA_CLIENT_ID=${INTRA_CLIENT_ID}
      - INTRA_CLIENT_SECRET=${INTRA_CLIENT_SECRET}
      - INTRA_CLIENT_STAT=${INTRA_CLIENT_STAT}

      - LOCAL_ENDPOINT=http://${LOCAL_ADDRESS}:${LOCAL_PORT}
      - LOCAL_CALLBACK=http://${LOCAL_ADDRESS}:${LOCAL_PORT}/${LOCAL_CALLBACK_ENDPOINT}
    
      - MAILGUN_KEY=${MAILGUN_KEY}
      - TOKEN_2FA_KEY=${TOKEN_2FA_KEY}
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "localhost:3000/api/health"]
      interval: 1s
      timeout: 10s
      retries: 10
      start_period: 1s

  postgresql:
    image: postgres
    container_name: postgresql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - ft_transcendence
    expose:
      - 5432
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 1s
      timeout: 10s
      retries: 10
      start_period: 1s

  vuejs:
    container_name: vuejs
    build:
      context: ./frontend/vuejs
      dockerfile: ./Dockerfile
    image: vuejs
    ports:
      - 3000:80
    networks:
      - ft_transcendence
    depends_on:
      nestjs:
        condition: service_healthy